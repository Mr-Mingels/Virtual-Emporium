{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate, useLocation } from 'react-router-dom';\nconst RedirectToHome = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Check if the route was matched due to navigation or manual URL input\n  const isNavigationAction = location.state && location.state.navigation;\n\n  // Redirect to the root route only if it's not a navigation action\n  if (!isNavigationAction) {\n    navigate('/');\n  }\n  return null; // Return null to render nothing\n};\n_s(RedirectToHome, \"VDZHUspDq9N5O9RWjniBrjgIdAA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = RedirectToHome;\nexport default RedirectToHome;\nvar _c;\n$RefreshReg$(_c, \"RedirectToHome\");","map":{"version":3,"names":["useNavigate","useLocation","RedirectToHome","_s","navigate","location","isNavigationAction","state","navigation","_c","$RefreshReg$"],"sources":["C:/Users/Sycol/ReactProjects/virtual-emporium/client/src/components/RedirectToHome.tsx"],"sourcesContent":["import { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst RedirectToHome = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Check if the route was matched due to navigation or manual URL input\r\n  const isNavigationAction = location.state && location.state.navigation;\r\n\r\n  // Redirect to the root route only if it's not a navigation action\r\n  if (!isNavigationAction) {\r\n    navigate('/');\r\n  }\r\n\r\n  return null; // Return null to render nothing\r\n};\r\n\r\nexport default RedirectToHome\r\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAC9B,MAAMK,QAAQ,GAAGJ,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMK,kBAAkB,GAAGD,QAAQ,CAACE,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAACC,UAAU;;EAEtE;EACA,IAAI,CAACF,kBAAkB,EAAE;IACvBF,QAAQ,CAAC,GAAG,CAAC;EACf;EAEA,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACD,EAAA,CAbID,cAAc;EAAA,QACDF,WAAW,EACXC,WAAW;AAAA;AAAAQ,EAAA,GAFxBP,cAAc;AAepB,eAAeA,cAAc;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}