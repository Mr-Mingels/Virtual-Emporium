[{"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\index.tsx":"1","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\App.tsx":"2","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\NotFound.tsx":"3","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\ScrollToTop.tsx":"4","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\FetchProducts.ts":"5","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\NavBar.tsx":"6","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Footer.tsx":"7","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\WishList\\WishList.tsx":"8","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Product\\Product.tsx":"9","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Shop\\Shop.tsx":"10","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\ShoppingCart\\ShoppingCart.tsx":"11","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\Home.tsx":"12","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Authentication.tsx":"13","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\RemoveWishListItemModal.tsx":"14","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\ProductCarousel.tsx":"15","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\Info.tsx":"16","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\Hero.tsx":"17","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\CuratedPicks.tsx":"18","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Shop\\DropDownMenu.tsx":"19"},{"size":273,"mtime":1691608402295,"results":"20","hashOfConfig":"21"},{"size":6477,"mtime":1696161043039,"results":"22","hashOfConfig":"21"},{"size":254,"mtime":1696150950835,"results":"23","hashOfConfig":"21"},{"size":334,"mtime":1696006529447,"results":"24","hashOfConfig":"21"},{"size":671,"mtime":1696163931153,"results":"25","hashOfConfig":"21"},{"size":13509,"mtime":1696162351943,"results":"26","hashOfConfig":"21"},{"size":4661,"mtime":1696172863992,"results":"27","hashOfConfig":"21"},{"size":4424,"mtime":1696162313511,"results":"28","hashOfConfig":"21"},{"size":12559,"mtime":1696161034844,"results":"29","hashOfConfig":"21"},{"size":19100,"mtime":1696006450174,"results":"30","hashOfConfig":"21"},{"size":10083,"mtime":1696161015821,"results":"31","hashOfConfig":"21"},{"size":667,"mtime":1696006382026,"results":"32","hashOfConfig":"21"},{"size":10937,"mtime":1696161018608,"results":"33","hashOfConfig":"21"},{"size":2472,"mtime":1696160976670,"results":"34","hashOfConfig":"21"},{"size":7610,"mtime":1696006407861,"results":"35","hashOfConfig":"21"},{"size":2710,"mtime":1696006386478,"results":"36","hashOfConfig":"21"},{"size":3734,"mtime":1696172464467,"results":"37","hashOfConfig":"21"},{"size":2697,"mtime":1696091786365,"results":"38","hashOfConfig":"21"},{"size":10555,"mtime":1696006437566,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"k7tfpa",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"43"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\index.tsx",[],[],["106"],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\App.tsx",["107","108","109"],[],"import React, { useState, useEffect, useRef, lazy, Suspense } from 'react';\nimport { BrowserRouter, Route, Routes, useLocation, useNavigate } from 'react-router-dom';\nimport FetchProducts from './components/FetchProducts';\nimport ScrollToTop from './components/ScrollToTop';\nimport axios from 'axios';\n\nconst NavBar = lazy(() => import('./components/NavBar'))\nconst Home = lazy(() => import('./components/Home/Home'))\nconst Shop = lazy(() => import('./components/Shop/Shop'))\nconst Product = lazy(() => import('./components/Product/Product'))\nconst ShoppingCart = lazy(() => import('./components/ShoppingCart/ShoppingCart'))\nconst WishList = lazy(() => import('./components/WishList/WishList'))\nconst Footer = lazy(() => import('./components/Footer'))\nconst NotFound = lazy(() => import('./components/NotFound'))\n\nconst App = () => {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [userInfo, setUserInfo] = useState()\n  // Initialize shoppingCart state with data from localStorage or an empty array\n  const [shoppingCart, setShoppingCart] = useState([])\n  const [wishList, setWishList] = useState([])\n  const { allProducts }: any = FetchProducts()\n  const categories = ['women', 'men', 'jewelery', 'best-sellers', 'all-products']\n  const [defaultLoader, setDefaultLoader] = useState(true)\n  const timeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);\n  const [openAuthenticationModal, setOpenAuthenticationModal] = useState(false)\n  const [authNavigationOption, setAuthNavigationOption] = useState('')\n\n  const getUserInfo = async () => {\n    try {\n      const response = await fetch(\"/user-info\", { credentials: \"include\", });\n      // check for user authentication\n      if (response.status === 401) {\n        setIsLoggedIn(false)\n      } else {\n        const userData = await response.json();\n        setUserInfo(userData);\n        setIsLoggedIn(true)\n      }\n    } catch (error: any) {\n      console.log(error.message);\n      console.log(error);\n    }\n  };\n\n  const getUserCartInfo = async () => {\n    if (!isLoggedIn) {\n      setShoppingCart([])\n      return\n    }\n    try {\n      const response = await axios.get('/cart-products', { withCredentials: true, })\n      if (response.status === 200) {\n        const { cartProducts } = response.data;\n        setShoppingCart(cartProducts)\n      } else {\n        setShoppingCart([])\n      } \n    } catch (error: any) {\n      console.log(error)\n    }\n  }\n\n  const getUserWishListInfo = async () => {\n    if (!isLoggedIn) {\n      setWishList([])\n      return\n    }\n    try {\n      const response = await axios.get('/wishlist-items', { withCredentials: true, })\n      if (response.status === 200) {\n        const { wishListItems } = response.data;\n        setWishList(wishListItems)\n      } else {\n        setWishList([])\n      } \n    } catch (error: any) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    getUserInfo()\n  }, [])\n\n  useEffect(() => {\n    getUserCartInfo()\n    getUserWishListInfo()\n  },[isLoggedIn])\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  });\n\n  useEffect(() => {\n    // Clear the existing timeout if it exists\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    if (allProducts) {\n      setDefaultLoader(false)\n    } else {\n      // Set a new timeout and store its reference\n      timeoutRef.current = setTimeout(() => {\n        setDefaultLoader(false);\n      }, 5000);\n    }\n\n    // Cleanup the timeout reference when the component unmounts\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [allProducts])\n\n  const handleAuthenticationOpen = () => {\n    setOpenAuthenticationModal(true)\n    document.body.style.overflowY = 'hidden';\n  }\n\n  const handleAuthenticationClose = () => {\n    setOpenAuthenticationModal(false)\n    document.body.style.overflowY = 'auto';\n  }\n\n  if (defaultLoader) {\n    return <div className='mainLoaderWrapper'><span className=\"mainLoader\"></span></div>\n  }\n\n  return (\n    <BrowserRouter>\n      <Suspense fallback={<div className='mainLoaderWrapper'><span className=\"mainLoader\"></span></div>}>\n        <NavBar windowWidth={windowWidth} allProducts={allProducts} isLoggedIn={isLoggedIn} getUserInfo={getUserInfo}\n          openAuthenticationModal={openAuthenticationModal} handleAuthenticationOpen={handleAuthenticationOpen}\n          handleAuthenticationClose={handleAuthenticationClose} userInfo={userInfo} authNavigationOption={authNavigationOption} \n          setAuthNavigationOption={setAuthNavigationOption} shoppingCart={shoppingCart} wishList={wishList}/>\n        <ScrollToTop />\n        <Routes>\n          <Route path='/' element={<Home windowWidth={windowWidth} allProducts={allProducts} />} />\n          {categories.map((category, index) => (\n            <Route key={index} path={`/shop/${category}`}\n              element={<Shop windowWidth={windowWidth} allProducts={allProducts} />}\n            />\n          ))}\n          {allProducts?.filter((product: any) => product.category !== \"electronics\").map((product: any, index: number) => (\n            <Route key={index} path={`/product/${product.id}`}\n              element={<Product windowWidth={windowWidth} allProducts={allProducts} product={product} setShoppingCart={setShoppingCart}\n                shoppingCart={shoppingCart} wishList={wishList} handleAuthenticationOpen={handleAuthenticationOpen}\n                isLoggedIn={isLoggedIn} userInfo={userInfo} getUserWishListInfo={getUserWishListInfo}/>}\n            />\n          ))}\n          <Route path='/cart' element={<ShoppingCart windowWidth={windowWidth} isLoggedIn={isLoggedIn}\n            shoppingCart={shoppingCart} userInfo={userInfo} getUserCartInfo={getUserCartInfo}/>} />\n          <Route path='/wishlist' element={<WishList windowWidth={windowWidth} isLoggedIn={isLoggedIn}\n            wishList={wishList} userInfo={userInfo} getUserWishListInfo={getUserWishListInfo}/>}/>\n          <Route path='/shop/search' element={<Shop windowWidth={windowWidth} allProducts={allProducts} />} />\n          <Route path='*' element={<NotFound />} />\n        </Routes>\n        <Footer />\n      </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\NotFound.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\ScrollToTop.tsx",["110"],[],"import React, { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0); // Scroll to the top of the page on route change\r\n  }, [pathname]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ScrollToTop;\r\n","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\FetchProducts.ts",["111"],[],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default function FetchProducts() {\r\n    const [allProducts, setAllProducts] = useState(null)\r\n\r\n    const fetchAllProducts = async () => {\r\n        try {\r\n            const response = await axios.get(`https://fakestoreapi.com/products`);\r\n            if (response) {\r\n                setAllProducts(response.data)\r\n            } else {\r\n                console.log('Error: Products Not Found!')\r\n            }\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetchAllProducts();\r\n    }, []);\r\n\r\n    return { allProducts }\r\n}\r\n","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\NavBar.tsx",["112","113"],[],"import React, { useState, useEffect, FC } from 'react'\r\nimport '../styles/NavBar.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart, faCartShopping, faStar, faMagnifyingGlass, faUser, faBars, faX, faHouse, faAngleRight, faShoppingCart } from '@fortawesome/free-solid-svg-icons'\r\nimport { faWolfPackBattalion } from '@fortawesome/free-brands-svg-icons'; // Example import from the brands style\r\nimport { Link } from 'react-router-dom'\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Authentication from './Authentication';\r\n\r\n\r\ninterface NavBarProps {\r\n  windowWidth: number,\r\n  allProducts: any,\r\n  isLoggedIn: boolean,\r\n  getUserInfo: Function,\r\n  openAuthenticationModal: boolean,\r\n  handleAuthenticationOpen: Function,\r\n  handleAuthenticationClose: Function,\r\n  userInfo: any,\r\n  authNavigationOption: string,\r\n  setAuthNavigationOption: Function,\r\n  shoppingCart: any,\r\n  wishList: any\r\n}\r\n\r\nconst NavBar: FC<NavBarProps> = ({ windowWidth, allProducts, isLoggedIn, getUserInfo, openAuthenticationModal, handleAuthenticationOpen,\r\n  handleAuthenticationClose, userInfo, authNavigationOption, setAuthNavigationOption, wishList, shoppingCart }) => {\r\n  const [drawerOpen, setDrawerOpen] = useState(false)\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [totalItems, setTotalItems] = useState(0)\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n\r\n  const handleDrawerOpen = () => {\r\n    setDrawerOpen(true)\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setDrawerOpen(false)\r\n  }\r\n\r\n  const navigateToHome = () => {\r\n    navigate('/')\r\n  }\r\n\r\n  const handleSearch = (e: any) => {\r\n    e.preventDefault();\r\n    if (searchQuery) {\r\n      navigate(`/shop/search?q=${searchQuery}`)\r\n      setDrawerOpen(false)\r\n      setSearchQuery('')\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  const handleProductNavigation = (productId: number) => {\r\n    setSearchQuery('')\r\n    navigate(`/product/${productId}`)\r\n  }\r\n\r\n  const handleExclusiveRoutesNavigation = (route: string) => {\r\n    if (!isLoggedIn) {\r\n      handleAuthenticationOpen()\r\n      return\r\n    }\r\n    navigate(route)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn && (location.pathname === '/cart' || location.pathname === '/wishlist')) {\r\n      navigate('/')\r\n      return\r\n    }\r\n    if (drawerOpen) {\r\n      setDrawerOpen(false)\r\n    }\r\n  }, [location.pathname])\r\n\r\n  useEffect(() => {\r\n    if (openAuthenticationModal && drawerOpen) {\r\n      setDrawerOpen(false)\r\n    }\r\n  }, [openAuthenticationModal])\r\n\r\n  useEffect(() => {\r\n    if (shoppingCart.length !== 0) {\r\n      const itemQuantitys = shoppingCart.map((product: any) => product.productQuantity);\r\n      setTotalItems(itemQuantitys.reduce((accumulator: any, currentValue: any) => {\r\n        return accumulator + currentValue;\r\n      }, 0))\r\n    }\r\n  }, [shoppingCart])\r\n\r\n  return (\r\n    <section className='navBarSection'>\r\n      <div className='navBarHeaderWrapper'>\r\n        <div className='navBarHeaderContent'>\r\n          <ul className='navBarHeaderListWrapper'>\r\n            <Link to='/shop/all-products' className='navBarHeaderItem' onMouseDown={e => e.preventDefault()}>All Products</Link>\r\n            <Link to='/shop/best-sellers' className='navBarHeaderItem' onMouseDown={e => e.preventDefault()}>Best Sellers</Link>\r\n            <Link to='/shop/men' className='navBarHeaderItem' onMouseDown={e => e.preventDefault()}>Men</Link>\r\n            <Link to='/shop/women' className='navBarHeaderItem' onMouseDown={e => e.preventDefault()}>Women</Link>\r\n            <Link to='/shop/jewelery' className='navBarHeaderItem' onMouseDown={e => e.preventDefault()}>Jewelery</Link>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className='navBarWrapper'>\r\n        <div className='navBarContent'>\r\n          <div className='navBarFirstSectionWrapper'>\r\n            <div className='navBarLogoIconWrapper' onClick={navigateToHome}>\r\n              <FontAwesomeIcon icon={faWolfPackBattalion} className='navBarLogoIcon' />\r\n            </div>\r\n            <h2 className='navBarTitle'>Virtual Emporium</h2>\r\n          </div>\r\n          <div className='navBarSecondSectionWrapper'>\r\n            <form className='navBarSearchInputWrapper' onSubmit={handleSearch}>\r\n              <input className='navBarSearchInput' placeholder='Search product...' value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)} type='text' />\r\n              <div className='navBarSearchIconWrapper'>\r\n                <FontAwesomeIcon icon={faMagnifyingGlass} className='navBarSearchIcon' />\r\n              </div>\r\n              {(allProducts && searchQuery) && (\r\n                <div className='navBarRenderedProductSearchWrapper'>\r\n                  {allProducts\r\n                    .filter((product: any) =>\r\n                      (product.category !== \"electronics\" &&\r\n                        product.title.toLowerCase().includes(searchQuery.toLowerCase())) ||\r\n                      (product.category !== \"electronics\" &&\r\n                        product.category.toLowerCase().includes(searchQuery.toLowerCase()))\r\n                    )\r\n                    .map((product: any, index: number) => {\r\n\r\n                      const roundedNum = Math.round(product.rating.rate)\r\n\r\n                      return (\r\n                        <div className='navBarProductWrapper' key={index} onClick={() => handleProductNavigation(product.id)}>\r\n                          <img className='navBarProductImg' src={product.image} alt='product' onMouseDown={(e) => e.preventDefault()} />\r\n                          <div className='navBarProductInfoWrapper'>\r\n                            <span className='navBarProductCategoryTxt'>{product.category.toUpperCase()}</span>\r\n                            <h3 className='navBarProductTitle'>{product.title}</h3>\r\n                            <div className='navBarProductPriceAndRatingsWrapper'>\r\n                              <span className='navBarProductPrice'>Price: ${product.price}</span>\r\n                              <div className='navBarProductRatingWrapper'>\r\n                                <FontAwesomeIcon className={`navBarProductIcon ${roundedNum >= 1 ? 'fullStar' : 'emptyStar'}`}\r\n                                  icon={faStar} />\r\n                                <FontAwesomeIcon className={`navBarProductIcon ${roundedNum >= 2 ? 'fullStar' : 'emptyStar'}`}\r\n                                  icon={faStar} />\r\n                                <FontAwesomeIcon className={`navBarProductIcon ${roundedNum >= 3 ? 'fullStar' : 'emptyStar'}`}\r\n                                  icon={faStar} />\r\n                                <FontAwesomeIcon className={`navBarProductIcon ${roundedNum >= 4 ? 'fullStar' : 'emptyStar'}`}\r\n                                  icon={faStar} />\r\n                                <FontAwesomeIcon className={`navBarProductIcon ${roundedNum >= 5 ? 'fullStar' : 'emptyStar'}`}\r\n                                  icon={faStar} />\r\n                                <span className='navBarRatingCount'>({product.rating.count})</span>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                </div>\r\n              )}\r\n            </form>\r\n            {windowWidth >= 800 ? (\r\n              <ul className='navBarIconListWrapper'>\r\n                <div className={`navBarIconWrapper ${wishList.length !== 0 ? 'badge' : ''}`} onClick={() => {\r\n                  setAuthNavigationOption('/wishlist')\r\n                  handleExclusiveRoutesNavigation('/wishlist')\r\n                }}>\r\n                  <FontAwesomeIcon icon={faHeart} className='navBarIcon' />\r\n                </div>\r\n                <div className={`navBarIconWrapper ${shoppingCart.length !== 0 ? 'badge' : ''}`} onClick={() => {\r\n                  setAuthNavigationOption('/cart')\r\n                  handleExclusiveRoutesNavigation('/cart')\r\n                }}>\r\n                  <FontAwesomeIcon icon={faShoppingCart} className='navBarIcon' />\r\n                </div>\r\n                <span className='navBarIconSeperator'></span>\r\n                <FontAwesomeIcon icon={faUser} className='navBarIcon' onClick={() => {\r\n                  setAuthNavigationOption('')\r\n                  handleAuthenticationOpen()\r\n                }} />\r\n              </ul>\r\n            ) : (\r\n              <div className='navBarHamburgerMenuWrapper' onClick={() => handleDrawerOpen()}>\r\n                <FontAwesomeIcon icon={faBars} className='navBarHamburgerMenuIcon' />\r\n              </div>\r\n            )}\r\n            {windowWidth <= 800 && (\r\n              <div className={`fullScreenWrapper ${drawerOpen ? 'open' : ''}`}>\r\n                <div className={`navBarDrawerWrapper ${drawerOpen ? 'open' : ''}`}>\r\n                  <div className='navBarDrawerContent'>\r\n                    <div className='navBarDrawerCloseBtnWrapper' onClick={() => handleDrawerClose()}>\r\n                      <FontAwesomeIcon icon={faX} className='navBarDrawerCloseIcon' />\r\n                      <span className='navBarDrawerCloseTxt'>Close</span>\r\n                    </div>\r\n                    <ul className='navBarDrawerGeneralLinksListWrapper'>\r\n                      <div className='navBarDrawerGeneralLinksWrapper' onClick={() => navigateToHome()}>\r\n                        <FontAwesomeIcon icon={faHouse} className='navBarDrawerIcon' />\r\n                        <span className='navBarDrawerGeneralLinkTxt'>Home</span>\r\n                      </div>\r\n                      <div className='navBarDrawerGeneralLinksWrapper' onClick={() => {\r\n                        setAuthNavigationOption('')\r\n                        handleAuthenticationOpen()\r\n                      }}>\r\n                        <FontAwesomeIcon icon={faUser} className='navBarDrawerIcon' />\r\n                        <span className='navBarDrawerGeneralLinkTxt'>Log in or Register</span>\r\n                      </div>\r\n                      <div className='navBarDrawerGeneralLinksWrapper' onClick={() => {\r\n                        setAuthNavigationOption('/wishlist')\r\n                        handleExclusiveRoutesNavigation('/wishlist')\r\n                      }}>\r\n                        <FontAwesomeIcon icon={faHeart} className='navBarDrawerIcon' />\r\n                        <span className='navBarDrawerGeneralLinkTxt'>Wishlist</span>\r\n                        <span className='navBarDrawerBadge'>{wishList.length}</span>\r\n                      </div>\r\n                      <div className='navBarDrawerGeneralLinksWrapper' onClick={() => {\r\n                        setAuthNavigationOption('/cart')\r\n                        handleExclusiveRoutesNavigation('/cart')\r\n                      }}>\r\n                        <FontAwesomeIcon icon={faCartShopping} className='navBarDrawerIcon' />\r\n                        <span className='navBarDrawerGeneralLinkTxt'>Cart</span>\r\n                        <span className='navBarDrawerBadge'>{totalItems}</span>\r\n                      </div>\r\n                    </ul>\r\n                    <ul className='navBarDrawerCategoryListWrapper'>\r\n                      <Link to='/shop/all-products' className='navBarDrawerCategory'>ALL PRODUCTS<FontAwesomeIcon icon={faAngleRight}\r\n                        className='navBarDrawerCategoryIcon' onMouseDown={e => e.preventDefault()} /></Link>\r\n                      <Link to='/shop/best-sellers' className='navBarDrawerCategory'>BEST SELLERS<FontAwesomeIcon icon={faAngleRight}\r\n                        className='navBarDrawerCategoryIcon' onMouseDown={e => e.preventDefault()} /></Link>\r\n                      <Link to='/shop/women' className='navBarDrawerCategory'>WOMEN<FontAwesomeIcon icon={faAngleRight}\r\n                        className='navBarDrawerCategoryIcon' onMouseDown={e => e.preventDefault()} /></Link>\r\n                      <Link to='/shop/men' className='navBarDrawerCategory'>MEN<FontAwesomeIcon icon={faAngleRight}\r\n                        className='navBarDrawerCategoryIcon' onMouseDown={e => e.preventDefault()} /></Link>\r\n                      <Link to='/shop/jewelery' className='navBarDrawerCategory'>JEWELERY<FontAwesomeIcon icon={faAngleRight}\r\n                        className='navBarDrawerCategoryIcon' onMouseDown={e => e.preventDefault()} /></Link>\r\n                    </ul>\r\n                    {windowWidth <= 500 && (\r\n                      <form className='navBarSearchInputWrapper drawer' onSubmit={handleSearch}>\r\n                        <input className='navBarSearchInput drawer' placeholder='Search product...' value={searchQuery}\r\n                          onChange={(e) => setSearchQuery(e.target.value)} />\r\n                        <div className='navBarSearchIconWrapper drawer'>\r\n                          <FontAwesomeIcon icon={faMagnifyingGlass} className='navBarSearchIcon drawer' />\r\n                        </div>\r\n                      </form>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {openAuthenticationModal && (\r\n        <Authentication handleAuthenticationClose={handleAuthenticationClose} isLoggedIn={isLoggedIn} getUserInfo={getUserInfo}\r\n          userInfo={userInfo} authNavigationOption={authNavigationOption} />\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Footer.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\WishList\\WishList.tsx",["114"],[],"import React, { FC, useState, useEffect, useRef } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport RemoveWishListItemModal from '../RemoveWishListItemModal'\r\nimport '../../styles/WishList/WishList.css'\r\n\r\ninterface WishListProps {\r\n    windowWidth: number,\r\n    wishList: any,\r\n    userInfo: any,\r\n    getUserWishListInfo: Function,\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst WishList: FC<WishListProps> = ({ windowWidth, wishList, userInfo, getUserWishListInfo, isLoggedIn }) => {\r\n    const [removeModalOpen, setRemoveModalOpen] = useState(false)\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n    const [imgBounds, setImgBounds] = useState<DOMRect | null>(null);\r\n    const [toggleUseEffectHook, setToggleUseEffectHook] = useState(false)\r\n    const imgRef = useRef<HTMLImageElement>(null);\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            getUserWishListInfo()\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!removeModalOpen) {\r\n            setModalIndex(null)\r\n        }\r\n    }, [removeModalOpen])\r\n\r\n    useEffect(() => {\r\n        if (imgRef.current) {\r\n            const bounds = imgRef.current.getBoundingClientRect();\r\n            setImgBounds(bounds);\r\n            if (bounds.height !== bounds.width) {\r\n                if (toggleUseEffectHook) {\r\n                    setToggleUseEffectHook(false)\r\n                } else {\r\n                    setToggleUseEffectHook(true)\r\n                }\r\n            }\r\n        }\r\n    }, [imgRef, windowWidth, toggleUseEffectHook, wishList]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <div className='mainLoaderWrapper'>\r\n            <span className=\"mainLoader\"></span>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <section className='wishListWrapper'>\r\n            <div className='wishListContent'>\r\n                <span className='wishListAccountInfoTxt'>Logged in as: {userInfo.email}</span>\r\n                <h2 className='wishListTitle'>Wish List</h2>\r\n                <div className='wishListMainContentWrapper'>\r\n                    <div className='wishListProductsWrapper'>\r\n                        {wishList.map((product: any, index: number) => (\r\n                            <div className={`wishListProductWrapper`} key={index}>\r\n                                <div className='wishListProductContent' onClick={() => {\r\n                                    navigate(`/product/${product.id}`)\r\n                                }}>\r\n                                    <img src={product.image} className='wishListProductImg' alt='wish list item'\r\n                                        onMouseDown={(e) => e.preventDefault()} ref={imgRef} style={{ height: imgBounds?.width }} />\r\n                                    <div className='wishListProductInfoWrapper'>\r\n                                        <span className='wishListProductCategory'>{product.category.toUpperCase()}</span>\r\n                                        <h4 className='wishListProductTitle'>{product.title}</h4>\r\n                                        <span className='wishListProductPrice'>${product.price}</span>\r\n                                        <div className='wishListProductRemoveBtnWrapper'>\r\n                                            <button className='wishListProductRemoveBtn' onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                setModalIndex(index)\r\n                                                setRemoveModalOpen(true)\r\n                                                document.body.style.overflowY = 'hidden';\r\n                                            }}>Remove</button>\r\n                                        </div>\r\n                                        {(removeModalOpen && modalIndex === index) && (\r\n                                            <RemoveWishListItemModal setRemoveModalOpen={setRemoveModalOpen} product={product}\r\n                                                getUserWishListInfo={getUserWishListInfo} wishList={wishList} />\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default WishList\r\n","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Product\\Product.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Shop\\Shop.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\ShoppingCart\\ShoppingCart.tsx",["115"],[],"import React, { FC, useState, useEffect } from 'react'\r\nimport '../../styles/ShoppingCart/ShoppingCart.css'\r\nimport axios from 'axios'\r\n\r\ninterface ShoppingCartProps {\r\n    windowWidth: number,\r\n    shoppingCart: any,\r\n    userInfo: any,\r\n    getUserCartInfo: Function,\r\n    isLoggedIn: boolean,\r\n}\r\n\r\nconst ShoppingCart: FC<ShoppingCartProps> = ({ windowWidth, shoppingCart, userInfo, getUserCartInfo, isLoggedIn }) => {\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const [modalIndex, setModalIndex] = useState<number | null>(null);\r\n    const [totalItems, setTotalItems] = useState(0)\r\n    const [totalCost, setTotalCost] = useState(0)\r\n    const [loader, setLoader] = useState(false)\r\n    const [checkOutLoader, setCheckOutLoader] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            getUserCartInfo()\r\n        }\r\n    }, [])\r\n\r\n    const handleRemoveModalOpen = (indexId: number) => {\r\n        setModalIndex(indexId)\r\n        setModalOpen(true)\r\n        document.body.style.overflowY = 'hidden';\r\n    }\r\n\r\n    const handleRemoveModalClose = () => {\r\n        if (loader) return\r\n        setModalIndex(null)\r\n        setModalOpen(false)\r\n        document.body.style.overflowY = 'auto';\r\n    }\r\n\r\n    useEffect(() => {\r\n        const itemQuantitys = shoppingCart.map((product: any) => product.productQuantity);\r\n        setTotalItems(itemQuantitys.reduce((accumulator: any, currentValue: any) => {\r\n            return accumulator + currentValue;\r\n        }, 0))\r\n        const subTotals = shoppingCart.map((product: any) => product.productQuantity * product.price);\r\n        setTotalCost(subTotals.reduce((accumulator: any, currentValue: any) => {\r\n            return accumulator + currentValue;\r\n        }, 0))\r\n    }, [shoppingCart])\r\n\r\n    const removeItemFromCart = async (productId: any) => {\r\n        setLoader(true)\r\n        try {\r\n            const response = await axios.delete('/remove-product', {\r\n                data: { productId },\r\n                withCredentials: true\r\n            });\r\n            if (response.status === 200) {\r\n                await getUserCartInfo()\r\n                handleRemoveModalClose()\r\n            }\r\n            setLoader(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            setLoader(false)\r\n        }\r\n    }\r\n\r\n    const handleCheckOut = async () => {\r\n        setCheckOutLoader(true)\r\n        try {\r\n            const response = await axios.post('/create-checkout-session', shoppingCart, { withCredentials: true })\r\n            if (response.status === 200) {\r\n                const { url } = response.data;\r\n                window.location.href = url;\r\n            }\r\n            setCheckOutLoader(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            setCheckOutLoader(false)\r\n        }\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <div className='mainLoaderWrapper'>\r\n            <span className=\"mainLoader\"></span>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <section className='shoppingCartWrapper'>\r\n            <div className='shoppingCartContent'>\r\n                <span className='shoppingCartAccountInfoTxt'>Logged in as: {userInfo.email}</span>\r\n                <h2 className='shoppingCartTitle'>Shopping Cart</h2>\r\n                <div className='shoppingCartMainContentWrapper'>\r\n                    <div className='shoppingCartProductsWrapper'>\r\n                        {shoppingCart.map((product: any, index: number) => (\r\n                            <div className={`shoppingCartProductWrapper ${index === 0 ? 'firstProduct' : ''}`} key={index}>\r\n                                <div className='shoppingCartProductContent'>\r\n                                    <img src={product.image} className='shoppingCartProductImg' alt='shopping cart product'\r\n                                        onMouseDown={(e) => e.preventDefault()} />\r\n                                    <div className='shoppingCartProductInfoWrapper'>\r\n                                        <h4 className='shoppingCartProductTitle'>{product.title}</h4>\r\n                                        <span className='shoppingCartProductColorTxt'>Color: {product.color.toUpperCase()}</span>\r\n                                        <span className='shoppingCartProductSizeTxt'>Size: {product.size}</span>\r\n                                        <span className='shoppingCartProductQuantityTxt'>Quantity: {product.productQuantity}</span>\r\n                                        <div className='shoppingCartProductPricesWrapper'>\r\n                                            <span className='shoppingCartProductPrice'>${product.price}</span>\r\n                                            <span className='shoppingCartProductSubTotal'>SubTotal:\r\n                                                ${product.price * product.productQuantity}</span>\r\n                                        </div>\r\n                                        <div className='shoppingCartProductRemoveBtnWrapper'>\r\n                                            <button className='shoppingCartProductRemoveBtn' \r\n                                            onClick={() => checkOutLoader ? null : handleRemoveModalOpen(index)}>Remove</button>\r\n                                        </div>\r\n                                        {(modalOpen && modalIndex === index) && (\r\n                                            <div className='shoppingCartRemoveModalWrapper'>\r\n                                                <div className='shoppingCartRemoveModalContent'>\r\n                                                    <h5 className='shoppingCartRemoveModalHeaderTxt'>Remove Item</h5>\r\n                                                    <p className='shoppingCartRemoveModalTxt'>Are you sure you want to remove this item from your cart?</p>\r\n                                                    <div className='shoppingCartRemoveModalBtnsWrapper'>\r\n                                                        {loader ? (\r\n                                                            <button className='shoppingCartRemoveModalBtn loading'>\r\n                                                                <span className='btnLoader'></span>\r\n                                                            </button>\r\n                                                        ) : (\r\n                                                            <button className='shoppingCartRemoveModalBtn'\r\n                                                                onClick={() => removeItemFromCart(product._id.toString())}>REMOVE</button>\r\n                                                        )}\r\n                                                        <button className='shoppingCartRemoveModalBtn cancel'\r\n                                                            onClick={() => handleRemoveModalClose()}>CANCEL</button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className='shoppingCartCheckOutWrapper'>\r\n                        <div className='shoppingCartOverViewWrapper'>\r\n                            <div className='shoppingCartOverViewHeader'>\r\n                                <h3 className='overViewHeaderTitle'>Order Summary</h3>\r\n                                <span className='overViewHeaderItemCount'>{totalItems ? totalItems : 0} Item(s)</span>\r\n                            </div>\r\n                            <div className='shoppingCartOverViewBody'>\r\n                                <div className='shoppingCartOverViewBodyItemWrapper top'>\r\n                                    <span className='shoppingCartOverViewBodyItem'>Item(s) Subtotal</span>\r\n                                    <span className='shoppingCartOverViewBodyItem'>${totalCost ? totalCost : 0}</span></div>\r\n                                <div className='shoppingCartOverViewBodyItemWrapper'>\r\n                                    <span className='shoppingCartOverViewBodyItem'>Shipping</span>\r\n                                    <span className='shoppingCartOverViewBodyItem'>TBD</span></div>\r\n                                <div className='shoppingCartOverViewBodyItemWrapper'>\r\n                                    <span className='shoppingCartOverViewBodyItem'>Subtotal</span>\r\n                                    <span className='shoppingCartOverViewBodyItem'>${totalCost ? totalCost : 0}</span></div>\r\n                                <div className='shoppingCartOverViewBodyItemWrapper bottom'>\r\n                                    <span className='shoppingCartOverViewBodyItem'>Estimated Tax</span>\r\n                                    <span className='shoppingCartOverViewBodyItem'>TBD</span></div>\r\n                            </div>\r\n                            <div className='shoppingCartOverViewFooter'>\r\n                                <h3 className='overViewFooterTitle'>Order Total</h3>\r\n                                <span className='overViewFooterItemCount'>${totalCost ? totalCost : 0}</span>\r\n                            </div>\r\n                        </div>\r\n                        {checkOutLoader ? (\r\n                            <button className='shoppingCartCheckOutBtn loading'>\r\n                                <span className='btnLoader'></span>\r\n                            </button>\r\n                        ) : (\r\n                            <div className='shoppingCartCheckOutBtnWrapper' onClick={() => handleCheckOut()}>\r\n                                <button className='shoppingCartCheckOutBtn'>CHECKOUT</button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ShoppingCart\r\n","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\Home.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Authentication.tsx",["116","117","118"],[],"import React, { FC, useState, useEffect } from 'react'\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { faWolfPackBattalion } from '@fortawesome/free-brands-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport '../styles/Authentication.css'\r\nimport axios from 'axios';\r\n\r\ninterface AuthProps {\r\n    handleAuthenticationClose: Function,\r\n    isLoggedIn: boolean,\r\n    getUserInfo: Function,\r\n    userInfo: any,\r\n    authNavigationOption: string\r\n}\r\n\r\nconst Authentication: FC<AuthProps> = ({ handleAuthenticationClose, isLoggedIn, getUserInfo, userInfo, authNavigationOption }) => {\r\n    const [authConfig, setAuthConfig] = useState('signUp');\r\n    const [redEmailPlaceHolder, setRedEmailPlaceHolder] = useState(false);\r\n    const [redPasswordPlaceholder, setRedPasswordPlaceholder] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const [demoLoader, setDemoLoader] = useState(false)\r\n    const [email, setEmail] = useState({\r\n        value: \"\",\r\n        placeholder: \"Enter your email\",\r\n    });\r\n    const [password, setPassword] = useState({\r\n        value: \"\",\r\n        placeholder: \"Enter your password\",\r\n    });\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        setRedPasswordPlaceholder(false);\r\n        setRedEmailPlaceHolder(false);\r\n        setEmail({ ...email, value: \"\", placeholder: \"Enter your email\" });\r\n        setPassword({ ...password, value: \"\", placeholder: \"Enter your password\" });\r\n    }, [authConfig]);\r\n\r\n    const handleFormSubmit = async (event: any) => {\r\n        event.preventDefault();\r\n        if (demoLoader) return\r\n        setLoader(true);\r\n        if (email.value === \"\") {\r\n            setRedEmailPlaceHolder(true);\r\n            setEmail({ ...email, placeholder: \"Please Fill Out This Field\" });\r\n        }\r\n        if (password.value === \"\") {\r\n            setRedPasswordPlaceholder(true);\r\n            setPassword({ ...password, placeholder: \"Please Fill Out This Field\" });\r\n        }\r\n        if (password.value === \"\" || email.value === \"\") {\r\n            setLoader(false);\r\n            return;\r\n        }\r\n\r\n        const user = {\r\n            email: email.value.toUpperCase(),\r\n            password: password.value,\r\n        };\r\n\r\n        try {\r\n            const path = authConfig === 'signUp' ? \"sign-up-page\" : \"log-in-page\";\r\n\r\n            const response = await axios.post(`/${path}`, user, { withCredentials: true, });\r\n            if (authConfig === 'signUp' && response.status === 200) {\r\n                setAuthConfig('logIn')\r\n                setEmail({ ...email, value: \"\" });\r\n                setPassword({ ...password, value: \"\" });\r\n            } else if (authConfig === \"logIn\" && response.status === 200) {\r\n                await getUserInfo()\r\n                handleAuthenticationClose(false)\r\n                if (authNavigationOption) {\r\n                    navigate(authNavigationOption)\r\n                }\r\n            }\r\n            setLoader(false);\r\n        } catch (error: any) {\r\n            if (error.response) {\r\n                // The request was made and the server responded with a status code\r\n                // that falls out of the range of 2xx\r\n                console.error(\"Error message: \", error.response.data.message);\r\n                if (error.response.data.message === \"Email is incorrect\") {\r\n                    setRedEmailPlaceHolder(true);\r\n                    setEmail({ ...email, value: \"\", placeholder: \"Incorrect email\" });\r\n                } else if (error.response.data.message === \"Incorrect password\") {\r\n                    setRedPasswordPlaceholder(true);\r\n                    setPassword({\r\n                        ...password,\r\n                        value: \"\",\r\n                        placeholder: \"Incorrect password\",\r\n                    });\r\n                } else if (error.response.data.message === \"Email has already been taken\") {\r\n                    setRedEmailPlaceHolder(true);\r\n                    setEmail({\r\n                        ...email,\r\n                        value: \"\",\r\n                        placeholder: \"Email has already been taken\",\r\n                    });\r\n                } else {\r\n                    // Something happened in setting up the request that triggered an Error\r\n                    console.error(\"Error\", error.message);\r\n                }\r\n                setLoader(false);\r\n            }\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (email.value !== \"\") {\r\n            setRedEmailPlaceHolder(false);\r\n            setEmail({ ...email, placeholder: \"Enter your email\" });\r\n        }\r\n    }, [email.value]);\r\n\r\n    useEffect(() => {\r\n        if (password.value !== \"\") {\r\n            setRedPasswordPlaceholder(false);\r\n            setPassword({ ...password, placeholder: \"Enter your password\" });\r\n        }\r\n    }, [password.value]);\r\n\r\n    const demoAccountLogIn = async () => {\r\n        if (loader) return\r\n        setDemoLoader(true)\r\n        const user = {\r\n            email: \"DEMOACCOUNT@GMAIL.COM\",\r\n            password: \"1234\",\r\n        };\r\n        try {\r\n            const response = await axios.post(`/log-in-page`, user, { withCredentials: true });\r\n            if (response.status === 200) {\r\n                await getUserInfo()\r\n                handleAuthenticationClose(false)\r\n                if (authNavigationOption) {\r\n                    navigate(authNavigationOption)\r\n                }\r\n            }\r\n            setDemoLoader(false)\r\n        } catch (err) {\r\n            console.log(err);\r\n            setDemoLoader(false)\r\n        }\r\n    };\r\n\r\n    const logOut = async () => {\r\n        setLoader(true)\r\n        try {\r\n            const response = await axios.get(`/log-out`, { withCredentials: true })\r\n            if (response.status === 200) {\r\n                await getUserInfo()\r\n                if (location.pathname === '/cart' || location.pathname === '/wishlist') {\r\n                    navigate('/')\r\n                }\r\n                handleAuthenticationClose(false)\r\n            }\r\n            setLoader(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n            setLoader(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='authWrapper'>\r\n            <div className={`authContent ${isLoggedIn ? 'logOut' : ''}`}>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <h5 className='authLogOutTitle'>Log Out</h5>\r\n                        <div className='authLogOutTxtWrapper'>\r\n                            <span className='authLogOutTxt accountInfo'>Account: {userInfo.email}</span>\r\n                            <span className='authLogOutTxt'>Are you sure you want to log out of your account?</span>\r\n                        </div>\r\n                        <div className='authLogOutBtnsWrapper'>\r\n                            {loader ? (\r\n                                <button type='button' className=\"authLogOutBtns authLoader\">\r\n                                    <span className=\"btnLoader\"></span>\r\n                                </button>\r\n                            ) : (\r\n                                <button className='authLogOutBtns' onClick={() => logOut()}>LOG OUT</button>\r\n                            )}\r\n                            <button className='authLogOutBtns close'\r\n                                onClick={loader ? undefined : () => handleAuthenticationClose(false)}>CLOSE</button>\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <div className='authLogoWrapper'>\r\n                            <FontAwesomeIcon icon={faWolfPackBattalion} className='authLogoIcon' />\r\n                        </div>\r\n                        <h2 className='authTitle'>{authConfig === 'signUp' ? 'Create your Account' : \"Log into your Account\"}</h2>\r\n                        <div className='authDemoAccountTxtWrapper'>\r\n                            {demoLoader ? (\r\n                                <span className='authDemoLoader'></span>\r\n                            ) : (\r\n                                <span className='authDemoAccountTxt' onClick={() => demoAccountLogIn()}>Use Demo Account</span>\r\n                            )}\r\n                        </div>\r\n                        <span></span>\r\n                        <form method=\"POST\" className=\"authForm\" onSubmit={handleFormSubmit}>\r\n                            <label className=\"authLabel\">Email<span className=\"authRequireTag\">*</span>\r\n                            </label>\r\n                            <input type=\"email\" name=\"email\" placeholder={email.placeholder}\r\n                                className={`authFormEmailInput ${redEmailPlaceHolder ? \"field\" : \"\"}`}\r\n                                onChange={(e) => setEmail({ ...email, value: e.target.value })} value={email.value}\r\n                            />\r\n                            <label className=\"authLabel\">Password<span className=\"authRequireTag\">*</span></label>\r\n                            <input type=\"password\" name=\"password\" placeholder={password.placeholder}\r\n                                className={`authFormPassWordInput ${redPasswordPlaceholder ? \"field\" : \"\"}`}\r\n                                onChange={(e) => setPassword({ ...password, value: e.target.value })} value={password.value}\r\n                            />\r\n                            <div className='authBtnsWrapper'>\r\n                                {loader ? (\r\n                                    <button type='button' className=\"authBtn authLoader\">\r\n                                        <span className=\"btnLoader\"></span>\r\n                                    </button>\r\n                                ) : (\r\n                                    <button type=\"submit\" className=\"authBtn authenticate\">\r\n                                        {authConfig === 'signUp' ? \"Sign Up\" : \"Log In\"}\r\n                                    </button>\r\n                                )}\r\n                                <button type='button' className='authBtn close'\r\n                                    onClick={loader || demoLoader ? undefined : () => handleAuthenticationClose(false)}>Close</button>\r\n                            </div>\r\n                            <span className='authPromptWrapper'>{authConfig === 'signUp' ? \"Already have an account?\" : \"Don't have an account?\"}\r\n                                {authConfig === 'signUp' ? <span className='authPrompt' onClick={() => setAuthConfig('logIn')}>Log In</span> :\r\n                                    <span className='authPrompt' onClick={() => setAuthConfig('signUp')}>Create Account</span>}</span>\r\n                        </form>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\nexport default Authentication\r\n","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\RemoveWishListItemModal.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\ProductCarousel.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\Info.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\Hero.tsx",["119"],[],"import React, { useEffect, useState } from 'react'\r\nimport '../../styles/Home/Hero.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAngleRight, faAngleLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport heroImg1 from '../../assets/CarouselImgs/heroImg1.jpg'\r\nimport heroImg2 from '../../assets/CarouselImgs/heroImg2.jpg'\r\nimport heroImg3 from '../../assets/CarouselImgs/heroImg3.jpg'\r\nimport heroImg4 from '../../assets/CarouselImgs/heroImg4.jpg'\r\n\r\nconst Hero = () => {\r\n    const [currIndex, setCurrIndex] = useState(0)\r\n    const autoSlide = true; // Determines whether the auto slide effect for the carousel is active or not\r\n    const autoSlideTimeInterval = 6000; // Determines the time interval for the autoslide effect\r\n    const [loader, setLoader] = useState(true)\r\n    const navigate = useNavigate()\r\n    if (loader) {\r\n        document.body.style.overflowY = 'hidden';\r\n    }\r\n\r\n    const slides = [\r\n        heroImg1,\r\n        heroImg2,\r\n        heroImg3,\r\n        heroImg4\r\n    ]\r\n\r\n    const handlePrevSlide = () => {\r\n        setCurrIndex((currIndex) => (currIndex === 0 ? slides.length - 1 : currIndex - 1))\r\n    }\r\n\r\n    const handleNextSlide = () => {\r\n        setCurrIndex((currIndex) => (currIndex === slides.length - 1 ? 0 : currIndex + 1))\r\n    }\r\n\r\n    const navigateToShop = () => {\r\n        navigate('/shop/all-products')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!autoSlide) return\r\n        const slideInterval = setInterval(handleNextSlide, autoSlideTimeInterval)\r\n        return () => clearInterval(slideInterval)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!loader) {\r\n            document.body.style.overflowY = 'auto';\r\n        }\r\n    }, [loader])\r\n\r\n    return (\r\n        <section className='carouselWrapper'>\r\n            {loader && (\r\n                <div className='mainLoaderWrapper'>\r\n                    <span className=\"mainLoader\"></span>\r\n                </div>\r\n            )}\r\n            <div className='carouselSlides' style={{ transform: `translateX(-${currIndex * 100}%)` }}>\r\n                {slides.map((slide, index) => (\r\n                    <img onLoad={() => setLoader(false)} className='heroSliderImg' key={index} src={slide} alt='hero slider images' loading=\"lazy\" />\r\n                ))}\r\n            </div>\r\n            <div className='carouselBtnsWrapper'>\r\n                <div className='carouselBtn leftArrow' onClick={handlePrevSlide}>\r\n                    <FontAwesomeIcon className='carouselIcon' icon={faAngleLeft} />\r\n                </div>\r\n                <div className='carouselBtn rightArrow' onClick={handleNextSlide}>\r\n                    <FontAwesomeIcon className='carouselIcon' icon={faAngleRight} />\r\n                </div>\r\n            </div>\r\n            <div className='carouselContentWrapper'>\r\n                <div className='carouselContentTxtWrapper'>\r\n                    <h1>Elevate your look with our best-selling collections</h1>\r\n                </div>\r\n                <button className='carouselContentBtn' onClick={navigateToShop}>Shop now <FontAwesomeIcon icon={faArrowRight} className='carouselContentIcon' /></button>\r\n\r\n                <div className='carouselPaginationDotsWrapper'>\r\n                    {slides.map((_: any, i: number) => (\r\n                        <div key={i} className='paginationDot' style={{ backgroundColor: `${currIndex === i ? '#FFD700' : '#dadada'}` }}\r\n                            onClick={() => setCurrIndex(i)} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className='carouselBackGroundColor'></div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Hero\r\n","C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Home\\CuratedPicks.tsx",[],[],"C:\\Users\\Sycol\\ReactProjects\\virtual-emporium\\client\\src\\components\\Shop\\DropDownMenu.tsx",[],[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":2,"column":40,"nodeType":"124","messageId":"125","endLine":2,"endColumn":51},{"ruleId":"122","severity":1,"message":"126","line":2,"column":53,"nodeType":"124","messageId":"125","endLine":2,"endColumn":64},{"ruleId":"127","severity":1,"message":"128","line":90,"column":5,"nodeType":"129","endLine":90,"endColumn":17,"suggestions":"130"},{"ruleId":"122","severity":1,"message":"131","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"122","severity":1,"message":"131","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"127","severity":1,"message":"132","line":78,"column":6,"nodeType":"129","endLine":78,"endColumn":25,"suggestions":"133"},{"ruleId":"127","severity":1,"message":"134","line":84,"column":6,"nodeType":"129","endLine":84,"endColumn":31,"suggestions":"135"},{"ruleId":"127","severity":1,"message":"136","line":26,"column":8,"nodeType":"129","endLine":26,"endColumn":10,"suggestions":"137"},{"ruleId":"127","severity":1,"message":"138","line":25,"column":8,"nodeType":"129","endLine":25,"endColumn":10,"suggestions":"139"},{"ruleId":"127","severity":1,"message":"140","line":38,"column":8,"nodeType":"129","endLine":38,"endColumn":20,"suggestions":"141"},{"ruleId":"127","severity":1,"message":"142","line":114,"column":8,"nodeType":"129","endLine":114,"endColumn":21,"suggestions":"143"},{"ruleId":"127","severity":1,"message":"144","line":121,"column":8,"nodeType":"129","endLine":121,"endColumn":24,"suggestions":"145"},{"ruleId":"127","severity":1,"message":"146","line":44,"column":8,"nodeType":"129","endLine":44,"endColumn":10,"suggestions":"147"},"no-new-object",["148"],"@typescript-eslint/no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getUserCartInfo' and 'getUserWishListInfo'. Either include them or remove the dependency array.","ArrayExpression",["149"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'drawerOpen', 'isLoggedIn', and 'navigate'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'drawerOpen'. Either include it or remove the dependency array.",["151"],"React Hook useEffect has missing dependencies: 'getUserWishListInfo' and 'isLoggedIn'. Either include them or remove the dependency array. If 'getUserWishListInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["152"],"React Hook useEffect has missing dependencies: 'getUserCartInfo' and 'isLoggedIn'. Either include them or remove the dependency array. If 'getUserCartInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["153"],"React Hook useEffect has missing dependencies: 'email' and 'password'. Either include them or remove the dependency array. You can also do a functional update 'setEmail(e => ...)' if you only need 'email' in the 'setEmail' call.",["154"],"React Hook useEffect has a missing dependency: 'email'. Either include it or remove the dependency array. You can also do a functional update 'setEmail(e => ...)' if you only need 'email' in the 'setEmail' call.",["155"],"React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array. You can also do a functional update 'setPassword(p => ...)' if you only need 'password' in the 'setPassword' call.",["156"],"React Hook useEffect has missing dependencies: 'autoSlide' and 'handleNextSlide'. Either include them or remove the dependency array.",["157"],"no-object-constructor",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [getUserCartInfo, getUserWishListInfo, isLoggedIn]",{"range":"176","text":"177"},"Update the dependencies array to be: [drawerOpen, isLoggedIn, location.pathname, navigate]",{"range":"178","text":"179"},"Update the dependencies array to be: [drawerOpen, openAuthenticationModal]",{"range":"180","text":"181"},"Update the dependencies array to be: [getUserWishListInfo, isLoggedIn]",{"range":"182","text":"183"},"Update the dependencies array to be: [getUserCartInfo, isLoggedIn]",{"range":"184","text":"185"},"Update the dependencies array to be: [authConfig, email, password]",{"range":"186","text":"187"},"Update the dependencies array to be: [email, email.value]",{"range":"188","text":"189"},"Update the dependencies array to be: [password, password.value]",{"range":"190","text":"191"},"Update the dependencies array to be: [autoSlide, handleNextSlide]",{"range":"192","text":"193"},[3049,3061],"[getUserCartInfo, getUserWishListInfo, isLoggedIn]",[2396,2415],"[drawerOpen, isLoggedIn, location.pathname, navigate]",[2531,2556],"[drawerOpen, openAuthenticationModal]",[975,977],"[getUserWishListInfo, isLoggedIn]",[869,871],"[getUserCartInfo, isLoggedIn]",[1550,1562],"[authConfig, email, password]",[4691,4704],"[email, email.value]",[4915,4931],"[password, password.value]",[1654,1656],"[autoSlide, handleNextSlide]"]